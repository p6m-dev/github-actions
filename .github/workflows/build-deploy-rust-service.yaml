name: Build & Deploy (Rust Service)

on:
  workflow_call:
    outputs:
      digest:
        description: "The docker image digest for the built image"
        value: ${{ jobs.build-publish-image.outputs.digest }}
    secrets:
      DOCKER_USERNAME:
        description: The username to use to authenticate with the Docker registry.
        required: true
      DOCKER_PASSWORD:
        description: The password to use to authenticate with the Docker registry.
        required: true
      CARGO_TOKEN:
        description: The token to use to authenticate with the Cargo registry.
        required: true
      UPDATE_MANIFEST_TOKEN:
        description: The token to use to push the new image digest to the .platform repo.
        required: true
    inputs:
      MODE:
        description: Release or Debug mode
        type: string
        required: false
        default: release
      DOCKER_REGISTRY:
        description: The hostname of the Docker registry as you would enter it for the `docker login` command.
        type: string
        required: false
      DOCKER_IMAGE_NAME:
        description: "The namespaced Docker image name. Example: `docker push -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest`"
        type: string
        default: ${{ github.repository }}
        required: false
      DOCKER_CONTEXT:
        description: The path to the Docker context to build.
        type: string
        default: '.'
        required: false
      DOCKERFILE:
        description: The absolute path to the Dockerfile to build.
        type: string
        default: './Dockerfile'
        required: false
      CARGO_REGISTRY_ALIAS:
        description: The alias of the Cargo registry to publish to as specified in the .cargo/config file of the repo.
        type: string
        required: false
        default: 'crates-io' # Default to the public registry
      CARGO_PACKAGES:
        description: A space-separated list of Cargo libraries/packages to publish.
        type: string
        required: false
        default: ''
      DO_VERSION_BUMP:
        description: A value indication whether to bump the version as the final step or not.
        type: boolean
        required: false
        default: true

env:
  CARGO_TERM_COLOR: always
  DOCKER_REGISTRY: ${{ inputs.DOCKER_REGISTRY || vars.ARTIFACTORY_HOSTNAME}}

jobs:
  build:
    outputs:
      version: ${{ steps.pkg-version.outputs.VERSION }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
          - target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-${{ inputs.MODE }}

      - name: Install rust cross
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cross
          git: https://github.com/cross-rs/cross

      # A dependency of rust-cross
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Cargo Registry
        uses: p6m-actions/rust-registry-login@v1
        with:
          cargo-tokens: |
            ${{ inputs.CARGO_REGISTRY_ALIAS }}=${{ secrets.CARGO_TOKEN }}
      
      - name: Cargo build Release
        run: |
          if [ "${{ inputs.MODE }}" = "release" ]; then
            cross build --release --target=${{ matrix.target }}
          else
            cross build --target=${{ matrix.target }}
          fi

      - name: Get Package Version
        id: pkg-version
        run: echo "VERSION=$(cargo xtask pkg-version)" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: targets-${{ matrix.target }}
          path: ./target

  build-publish-image:
    outputs:
      digest: ${{ steps.docker_build.outputs.digest }}
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: target
          merge-multiple: true
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Repo
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ inputs.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.build.outputs.version }},enable={{is_default_branch}}
            type=sha

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.DOCKER_CONTEXT }}
          file: ${{ inputs.DOCKERFILE }}
          pull: true
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha
          build-args: |
            MODE=${{ inputs.MODE }}

      - name: Record Summary
        run: |
          echo "Rust Application version: ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Docker image digest: ${{ steps.docker_build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Tags" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

  publish-crates:
    if: github.ref_name == 'main'
    # This job has been known to fail due to intermittent issues. We continue on error to avoid blocking the pipeline.
    # Having it as a separate job in the workflow allows us to rerun just this job if it fails.
    continue-on-error: true
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: build

      - name: Login to Cargo Registry
        uses: p6m-actions/rust-registry-login@v1
        with:
          cargo-tokens: |
            ${{ inputs.CARGO_REGISTRY_ALIAS }}=${{ secrets.CARGO_TOKEN }}

      - name: Install cargo-release
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-release
          version: 0.25.18

      - name: Publish Crates
        run: |
          CARGO_RELEASE_TARGET=''
          if [ -n '${{ inputs.CARGO_PACKAGES }}' ]; then
            # If packages are specified, publish only those packages
            CRATES_TO_PUBLISH=$(echo "${{ inputs.CARGO_PACKAGES }}" | xargs -n1 echo -n ' --package')
            CARGO_RELEASE_TARGET="$CARGO_RELEASE_TARGET $CRATES_TO_PUBLISH"
          else
            # If no packages specified, publish all crates in the workspace
            CARGO_RELEASE_TARGET="--workspace"
          fi
          cargo release publish $CARGO_RELEASE_TARGET --registry ${{ inputs.CARGO_REGISTRY_ALIAS }} --no-confirm --no-verify --execute
  
  bump-version:
    if: ${{ inputs.DO_VERSION_BUMP && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    needs:
      - build
      - publish-crates

    steps:
      - uses: actions/checkout@v4
      - name: Tag and Push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a ${{ needs.build.outputs.version }} -m "Release ${{ needs.build.outputs.version }}"
          git push origin ${{ needs.build.outputs.version }}

      - name: Install cargo-release
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-release
          version: 0.25.18

      - name: Login to Cargo Registry
        uses: p6m-actions/rust-registry-login@v1
        with:
          cargo-tokens: |
            ${{ inputs.CARGO_REGISTRY_ALIAS }}=${{ secrets.CARGO_TOKEN }}

      - name: Bump Version
        run: cargo release version patch -x --no-confirm --workspace

      - name: Commit and Push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "[skip ci] Bump Version"
          git push

  trigger-cd:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs: build-publish-image

    steps:
      - name: Trigger Update Image Digest
        run: |
          echo ${{ github.ref }}
          echo ${{ needs.build-publish-image.outputs.digest }}
          echo ${{ vars.PLATFORM_DISPATCH_URL }}
          curl -X POST \
            -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Authorization: token ${{ secrets.UPDATE_MANIFEST_TOKEN }}" \
            ${{ vars.PLATFORM_DISPATCH_URL }} \
            --fail-with-body \
            -d "{\"event_type\": \"update-digest\", \"client_payload\": {\"repository\": \"${GITHUB_REPOSITORY}\", \"directory_name\": \"$(basename ${GITHUB_REPOSITORY})\", \"environment_dir\": \"dev\", \"digest\": \"${{ needs.build-publish-image.outputs.digest }}\"}}"
      