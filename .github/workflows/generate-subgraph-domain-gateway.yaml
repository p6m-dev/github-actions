on:
  workflow_call:
    inputs:
      APPLICATION_IMAGE:
        required: true
        type: string
    secrets:
      SUBGRAPH_PULL_TOKEN:
        required: true
      REPOSITORY_PUSH_TOKEN:
        required: true
      ARTIFACTORY_USERNAME:
        required: true
      ARTIFACTORY_IDENTITY_TOKEN:
        required: true
      PIPELINE_TRIGGER_TOKEN:
        required: true

jobs:
  generate_subgraph:
    runs-on: ubuntu-latest
    services:
      application:
        image: ${{ inputs.APPLICATION_IMAGE }}
        env:
          SERVER_PORT: "8080" # Service Port
          MANAGEMENT_SERVER_PORT: "8081" # Management Port
        credentials:
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
        ports:
          - 8080:8080
          - 8081:8081
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rover
        run: |
          export APOLLO_TELEMETRY_DISABLED=1
          curl -sSL https://rover.apollo.dev/nix/v0.13.0 | sh
          echo "$HOME/.rover/bin" >> $GITHUB_PATH

      - name: Wait for service to start
        run: |
          ATTEMPT_COUNTER=0
          MAX_ATTEMPTS=12
          while ! curl --silent --fail localhost:8081/health; do
            if [ ${ATTEMPT_COUNTER} -ge ${MAX_ATTEMPTS} ];then
              echo "Max attempts reached, service did not come up in time please check your docker image."
              echo "Try running this command locally to see why the application failed to start:"
              echo "docker run --rm -e SERVER_PORT=8080 -e MANAGEMENT_SERVER_PORT=8081 -p 8080:8080 -p 8081:8081 ${{ inputs.APPLICATION_IMAGE }}"
              exit 1
            fi
            echo >&2 'Application not up yet, retrying in 5s...'
            ATTEMPT_COUNTER=$(($ATTEMPT_COUNTER+1))
            sleep 5
          done
          echo ""
          echo "Application is ready"

      - name: Generate Rover Subgraph
        id: generate_subgraph
        run: |
          rover subgraph introspect http://localhost:8080/graphql > ${{ github.event.repository.name }}.graphql
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "subgraph<<$EOF" >> $GITHUB_OUTPUT
          echo "$(cat './${{ github.event.repository.name }}.graphql')"  >> $GITHUB_OUTPUT
          echo >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - uses: actions/github-script@v6
        name: Add Pull Request Comment
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `Subgraph Generated by automation\`
            `<details><summary>${{ github.event.repository.name }}.graphql</summary>`\`
            \`\`\`graphql\n
            ${{ steps.generate_subgraph.outputs.subgraph }}
            \`\`\`
            </details>`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Update git branch
        if: github.ref == 'refs/heads/main'
        run: |
          git config --global user.email "automation@naxgrp.com"
          git config --global user.name "NAX Group Automation"
          git add .
          git diff-index --quiet HEAD || git commit -m "[skip ci] Update ${{ github.event.repository.name }} subgraph" && git push origin ${{ github.ref_name }}

      - name: Trigger Update Federated Gateway
        if: github.ref == 'refs/heads/main'
        run: |
          echo https://api.github.com/repos/${{ vars.TF_VAR_JV_PROJECT }}-${{vars.TF_VAR_JV_NAME}}/graphql-federated-gateway/dispatches
          curl -X POST \
              -H "Accept: application/vnd.github.everest-preview+json" \
              -H "Authorization: token ${{ secrets.PIPELINE_TRIGGER_TOKEN }}" \
              https://api.github.com/repos/${{ vars.TF_VAR_JV_PROJECT }}-${{vars.TF_VAR_JV_NAME}}/graphql-federated-gateway/dispatches \
              -d "{\"event_type\": \"update_subgraph\"}"
