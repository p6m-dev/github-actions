name: Build & Deploy (.NET Service)

on:
  workflow_call:
    outputs:
      digest:
        description: "The docker image digest for the built image"
        value: ${{ jobs.build.outputs.digest }}
    secrets:
      ARTIFACTORY_USERNAME:
        description: The username to use to authenticate with the Docker registry.
        required: true
      ARTIFACTORY_IDENTITY_TOKEN:
        description: The password to use to authenticate with the Docker registry.
        required: true

      UPDATE_MANIFEST_TOKEN:
        description: The token to use to push the new image digest to the .platform repo.
        required: true
    inputs:
      MODE:
        description: Release or Debug mode
        type: string
        required: false
        default: release
      ARTIFACTORY_REGISTRY:
        description: The hostname of the Docker registry as you would enter it for the `docker login` command.
        type: string
        required: true
      ARTIFACTORY_REPO:
        description: Artifactory repository name.
        type: string
        required: true
      DOCKER_IMAGE_NAME:
        description: "The namespaced Docker image name."
        type: string
        required: true
      DOCKER_CONTEXT:
        description: The path to the Docker context to build.
        type: string
        default: '.'
        required: false
      DOCKERFILE:
        description: The absolute path to the Dockerfile to build.
        type: string
        default: './Dockerfile'
        required: false


jobs:
  build:
    name: Build
    outputs:
    #   version: ${{ steps.pkg-version.outputs.VERSION }}
      digest: ${{ steps.docker_build.outputs.digest }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0

      - name: Add Artifactory NuGet source
        run: dotnet nuget add source --name "Artifactory" --username "${{ secrets.ARTIFACTORY_USERNAME }}" --password "${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}" --store-password-in-clear-text https://p6m.jfrog.io/artifactory/api/nuget/${{ github.repository_owner }}-nuget

      - name: Login to Docker Repository
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.ARTIFACTORY_REGISTRY }}
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}

      # Build the application
      - name: Build the application
        run: |
          dotnet restore
          dotnet build -c Release --no-restore --version-suffix ${{ github.run_number }}
          dotnet publish -c Release --version-suffix ${{ github.run_number }} -o ./publish

      # Run tests
#      - name: Run tests
#        run: dotnet test -c Release --no-build --verbosity normal  

      - name: Pack and push packages to Artifactory
        run: |
          dotnet pack --configuration Release -o ./artifacts --version-suffix ${{ github.run_number }}
          for package in ./artifacts/*.nupkg; do
            dotnet nuget push "$package" --source "Artifactory" --api-key "${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}"
          done
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.ARTIFACTORY_REGISTRY }}/${{ inputs.ARTIFACTORY_REPO }}/${{ inputs.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.event_name != 'pull_request' }}
            type=schedule,pattern=latest
            type=sha

      - name: Docker Build and Push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.DOCKER_CONTEXT }}
          file: ${{ inputs.DOCKERFILE }}
          # platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Record Summary
        run: |
          echo "### Docker Tags" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY  
 
  trigger-cd:
    name: Trigger CD
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Trigger Update Image Digest
        run: |
          echo ${{ github.ref }}
          echo ${{ needs.build.outputs.digest }}
          echo ${{ vars.PLATFORM_DISPATCH_URL }}
          curl -X POST \
            -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Authorization: token ${{ secrets.UPDATE_MANIFEST_TOKEN }}" \
            ${{ vars.PLATFORM_DISPATCH_URL }} \
            --fail-with-body \
            -d "{\"event_type\": \"update-digest\", \"client_payload\": {\"repository\": \"${GITHUB_REPOSITORY}\", \"directory_name\": \"$(basename ${GITHUB_REPOSITORY})\", \"environment_dir\": \"dev\", \"digest\": \"${{ needs.build.outputs.digest }}\"}}"
