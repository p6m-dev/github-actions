name: Test & Publish Crates

on:
  workflow_call:
    secrets:
      tokens:
        description: A newline-separated list of 'registry=token' pairs for authenticating with Cargo registries.
        required: false
    inputs:
      publish:
        description: A value indicating whether to publish the packages.
        type: boolean
        required: false
        default: true
      publish_registry:
        description: The alias of the Cargo registry where crates will be published, as specified in .cargo/config.toml. Newline separated for multiple registries.
        type: string
        required: false
        default: |
          "crates-io" # Default to the public registry
      packages:
        description: A space-separated list of Cargo libraries/packages to publish. If not specified, publishes all default-members of workspace.
        type: string
        required: false
        default: ""

env:
  CARGO_TERM_COLOR: always
  CARGO_RELEASE_VERSION: 0.25.10
  COMMIT_USER: github-actions
  COMMIT_EMAIL: github-actions@users.noreply.github.com

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      extra_cargo_opts: ${{ steps.cargo.outputs.extra_opts }}
    steps:
      - uses: actions/checkout@v4

      - name: Determine Cargo command line arguments
        id: cargo
        run: |
          EXTRA_CARGO_OPTS=''
          if [ -n '${{ inputs.packages }}' ]; then
            # If packages are specified, publish only those packages
            CRATES_TO_PUBLISH=$(echo "${{ inputs.packages }}" | xargs -n1 echo -n ' --package')
            EXTRA_CARGO_OPTS="$EXTRA_CARGO_OPTS $CRATES_TO_PUBLISH"
          else
            # If no packages specified, publish all crates in the workspace
            EXTRA_CARGO_OPTS="--workspace"
          fi
          # output EXTRA_CARGO_OPTS as outputs
          echo "extra_opts=${EXTRA_CARGO_OPTS}" >> $GITHUB_OUTPUT

      # Pre-warm cache
      - name: Install cargo-release
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-release
          version: ${{ env.CARGO_RELEASE_VERSION }}

  test:
    runs-on: ubuntu-latest
    needs: [prep]
    env:
      EXTRA_CARGO_OPTS: ${{ needs.prep.outputs.extra_cargo_opts }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: debug # Hardcoded to debug because that is what cargo clippy/test use.

      - name: Cargo Registry Login
        uses: p6m-dev/github-actions/cargo-registry-login@main
        with:
          cargo-tokens: ${{ secrets.tokens }}

      - name: Lint
        if: always()
        id: lint
        run: cargo clippy --all-targets --all-features 2>&1

      - name: Test Crates
        if: always()
        id: test
        run: cargo test $EXTRA_CARGO_OPTS 2>&1

      - name: Output Summary
        if: always()
        run: |
          echo '## Clippy Results' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.lint.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '## Test Results' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.test.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Bump versions to unblock SDLC as soon as possible
  bump-version:
    runs-on: ubuntu-latest
    needs: [prep]
    if: ${{ inputs.publish }}

    env:
      EXTRA_CARGO_OPTS: ${{ needs.prep.outputs.extra_cargo_opts }}

    steps:
      - uses: actions/checkout@v4

      - name: Install cargo-release
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-release
          version: ${{ env.CARGO_RELEASE_VERSION }}

      - name: Prepare next Cargo beta
        run: |
          git config user.name ${{ env.COMMIT_USER }}
          git config user.email ${{ env.COMMIT_EMAIL }}
          cargo release tag $EXTRA_CARGO_OPTS --no-confirm --execute
          cargo release version $EXTRA_CARGO_OPTS --no-confirm --execute beta
          cargo release commit --no-confirm --execute

      - name: Push
        run: |
          git push
          git push --tags

  matrix:
    if: ${{ inputs.publish }}
    runs-on: ubuntu-latest
    needs: [prep, test]
    outputs:
      publish_registry: ${{ steps.publish_registry.outputs.publish_registry }}
    steps:
      - name: Generate publish registry matrix
        id: publish_registry
        run: |
          PUBLISH_REGISTRY_JSON=$(echo "${{ inputs.publish_registry }}" | jq -R -s -c 'split("\n")[:-1]')
          echo "publish_registry=$PUBLISH_REGISTRY_JSON" >> $GITHUB_OUTPUT

  publish-crates:
    if: ${{ inputs.publish }}
    runs-on: ubuntu-latest
    needs: [matrix]
    strategy:
      fail-fast: false
      matrix:
        publish_registry: ${{ fromJSON(needs.matrix.outputs.publish_registry) }}

    env:
      EXTRA_CARGO_OPTS: ${{ needs.prep.outputs.extra_cargo_opts }}

    steps:
      - uses: actions/checkout@v4

      - name: Install cargo-release
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-release
          version: ${{ env.CARGO_RELEASE_VERSION }}

      - name: Cargo Registry Login
        uses: p6m-dev/github-actions/cargo-registry-login@main
        with:
          cargo-tokens: ${{ secrets.tokens }}

      - name: Publish Crates
        run: |
          cargo release publish $EXTRA_CARGO_OPTS --registry ${{ matrix.publish_registry }} --no-confirm --no-verify --execute

      - name: Update Job Summary
        env:
          # The summary template needs to be quoted twice. The `|-` for YAML and the `"`s for `jq`.
          # Package metadata fields can be referenced using `\(.field_name)`.
          # Run `cargo metadata --format-version 1 --no-deps | jq -r '.packages[0]'` in the repo root to see what metadata fields are available.
          PACKAGE_SUMMARY_TEMPLATE: |-
            "## \(.name)

            **Version:** \(.version)
            **Description:** \(.description)
            "
        run: |
          # Always print out versions for ALL workspace packages since they may differ.
          PACKAGES_METADATA=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages')
          echo "$PACKAGES_METADATA" | jq -r '.[] |'"$PACKAGE_SUMMARY_TEMPLATE" | tee -a $GITHUB_STEP_SUMMARY
