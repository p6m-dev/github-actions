name: Build & Deploy (Rust Workspace)

on:
  workflow_call:
    outputs:
      VERSION:
        value: ${{ jobs.build.outputs.VERSION }}
    secrets:
      DOCKER_USERNAME:
        description: The username to use to authenticate with the Docker registry.
        required: true
      DOCKER_PASSWORD:
        description: The password to use to authenticate with the Docker registry.
        required: true
      CARGO_TOKENS:
        description: >-
          Registry tokens in key=value format (one per line).
          Example:
            crates-io=token1
            my-registry=token2
        required: false
    inputs:
      MODE:
        description: Release or Debug mode
        type: string
        required: false
        default: release
      DOCKER_REGISTRY:
        description: The hostname of the Docker registry as you would enter it for the `docker login` command.
        type: string
        required: false
      DOCKER_IMAGE_NAME:
        description: "The namespaced Docker image name. Example: `docker push -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest`"
        type: string
        default: ${{ github.repository }}
        required: false
      DOCKER_CONTEXT:
        description: The path to the Docker context to build.
        type: string
        default: '.'
        required: false
      DOCKERFILE:
        description: The absolute path to the Dockerfile to build.
        type: string
        default: './Dockerfile'
        required: false
      DO_VERSION_BUMP:
        description: A value indication whether to bump the version as the final step or not.
        type: boolean
        required: false
        default: true
      PLATFORMS_TO_EXCLUDE:
        type: string
        required: false
        default: |
          linux/arm64

env:
  CARGO_TERM_COLOR: always
  DOCKER_REGISTRY: ${{ inputs.DOCKER_REGISTRY || vars.ARTIFACTORY_HOSTNAME}}
  RUST_TOOLCHAIN: stable

jobs:
  matrix:
    name: Generate Matrix Parameters
    runs-on: ubuntu-latest

    outputs:
      excludes: ${{ steps.excludes.outputs.excludes }}

    steps:
      - name: Excludes
        id: excludes
        run: |
          echo 'excludes<<EOF' >> $GITHUB_OUTPUT
          echo "$(echo '${{ inputs.PLATFORMS_TO_EXCLUDE }}' | yq --output-format json --no-colors --indent 0 '[] + split("'" "'")')" | tee $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  build:
    needs:
      - matrix

    strategy:
      matrix:
        include:
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            arch: arm64
          - runner: ubuntu-latest
            platform: linux/amd64
            arch: amd64
        exclude: ${{ fromJSON(needs.matrix.outputs.exclude) }}

    name: Docker Build (${{ matrix.platform }})
    outputs:
      VERSION: ${{ steps.pkg-version.outputs.VERSION }}

    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v4

      - name: Get Package Version
        id: pkg-version
        run: echo "VERSION=$(cargo xtask pkg-version)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Disable Auth for MVP
      # - name: Cargo Registry Login
      #   uses: p6m-dev/github-actions/cargo-registry-login@main
      #   with:
      #     cargo-tokens: ${{ secrets.CARGO_TOKENS }}

      - name: Login to Docker Repo
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push by Digest
        id: build
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.DOCKER_CONTEXT }}
          file: ${{ inputs.DOCKERFILE }}
          platforms: ${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha
          build-args: |
            MODE=${{ inputs.MODE }}
          outputs: |
            type=registry,name=${{ env.DOCKER_REGISTRY }}/${{ inputs.DOCKER_IMAGE_NAME }},push-by-digest=true,name-canonical=true

      - name: Export digest
        run: |
          mkdir -p ${RUNNER_TEMP}/digests
          echo "${{ steps.build.outputs.digest }}" > ${RUNNER_TEMP}/digests/digest-${{ matrix.arch }}.txt

      - name: Upload Image Digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Create and Push Docker Manifest Lists
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Download Image Digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Repo
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ inputs.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.steps.outputs.VERSION }},enable={{is_default_branch}}
            type=sha

      # Setting up the imagetools args in a separate step, lets us leverage Github's `env` context to print out the command that will be run.
      - name: Setup args for Buildx imagetools
        run: |
          echo "IMAGETOOLS_TAGS=$(echo ${DOCKER_METADATA_OUTPUT_TAGS} | xargs -n1 printf '\-t %s ')" >> $GITHUB_ENV
          echo "IMAGETOOLS_SOURCES=$(cat ${RUNNER_TEMP}/digests/* | xargs -n1 printf '${{ env.DOCKER_REGISTRY }}/${{ inputs.DOCKER_IMAGE_NAME }}@%s ')" >> $GITHUB_ENV

      - name: Docker Build/Push Multi-Arch Image
        run: |
          # `docker manifest create` has been deprecated and replaced by `docker buildx imagetools`.
          docker buildx imagetools create ${{ env.IMAGETOOLS_TAGS }} ${{ env.IMAGETOOLS_SOURCES }}

  bump-version:
    if: ${{ inputs.DO_VERSION_BUMP && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - uses: actions/checkout@v4
      - name: Tag and Push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a ${{ needs.build.outputs.VERSION }} -m "Release ${{ needs.build.outputs.VERSION }}"
          git push origin ${{ needs.build.outputs.VERSION }}

      - name: Install cargo-release
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-release
          version: 0.25.10

      - name: Cargo Registry Login
        uses: p6m-dev/github-actions/cargo-registry-login@main
        with:
          cargo-tokens: ${{ secrets.CARGO_TOKENS }}

      - name: Bump Version
        run: cargo release version patch -x --no-confirm --workspace

      - name: Commit and Push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "[skip ci] Bump Version"
          git push
